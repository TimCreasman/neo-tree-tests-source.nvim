==============================================================================
------------------------------------------------------------------------------
                                                                  *M.navigate()*
        `M.navigate`({state}, {path}, {path_to_reveal}, {callback}, {_})
to the given path. Navigates to a source, can be used to setup data on first navigation.
Parameters ~
{state} `(neotree.State)`
{path} `(string)` Path to navigate to. If empty, will navigate to the cwd.

------------------------------------------------------------------------------
the plugin, should be called before the plugin is used.
Parameters ~
{config} `(table)` Configuration table containing any keys that the user


==============================================================================
------------------------------------------------------------------------------
                                                                 *M.run_tests()*
                             `M.run_tests`({state})
Parameters ~
{state} `(neotree.StateWithTree)`

------------------------------------------------------------------------------
                                                                *M.stop_tests()*
                            `M.stop_tests`({state})
Parameters ~
{state} `(neotree.StateWithTree)`

------------------------------------------------------------------------------
                                                               *M.debug_tests()*
                            `M.debug_tests`({state})
Parameters ~
{state} `(neotree.StateWithTree)`

------------------------------------------------------------------------------
                                                               *M.watch_tests()*
                            `M.watch_tests`({state})
Parameters ~
{state} `(neotree.StateWithTree)`


==============================================================================
------------------------------------------------------------------------------
                                                                             *M*
                                      `M`
Type ~
`(table<neotree.Component.Tests._Key, neotree.Renderer>)`

------------------------------------------------------------------------------


------------------------------------------------------------------------------
Class ~
{neotree.Component.Tests}
Fields ~
{[1]} |`(neotree.Component.Common._Key)`

------------------------------------------------------------------------------
                                                                      *M.name()*
                        `M.name`({config}, {node}, {_})
Parameters ~
{config} `(neotree.Component.Common.Name)`

------------------------------------------------------------------------------
                                                                      *M.icon()*
                      `M.icon`({config}, {node}, {state})
Parameters ~
{config} `(neotree.Component.Common.Icon)`
{node} `(neotree)`-neotest.Node
{state} `(neotree.State)`


==============================================================================
------------------------------------------------------------------------------
                                                          *M.neotest_as_items()*
                         `M.neotest_as_items`({state})
Return ~
`(neotree)`-neotest.FileItem.Directory


==============================================================================
------------------------------------------------------------------------------
                                                               *neotest.neotree*
                               `neotest.neotree`
Class ~
{neotest.consumers.neotree}

------------------------------------------------------------------------------
                                                         *neotest.neotree.run()*
            `neotest.neotree.run`({context}, {root}, {create_item})
the neo-tree view with the test adapter tree
is run within the neo-tree source's navigate method and acts as the bridge between
neotest consumer and the neo-tree file view

Parameters ~
{context} `(table)`
{root} `(table)`
{create_item} `(function)`
Return ~
`(table)`

------------------------------------------------------------------------------
                                                   *neotest.neotree.run_tests()*
                  `neotest.neotree.run_tests`({node}, {opts})
tests
Parameters ~
{node} `(optional)` `(NuiTree.Node)`
{opts} `(optional)` `(neotree)`-neotest.RunArgs

------------------------------------------------------------------------------
                                                  *neotest.neotree.stop_tests()*
                      `neotest.neotree.stop_tests`({node})
tests
Parameters ~
{node} `(optional)` `(NuiTree.Node)`

------------------------------------------------------------------------------
                                                       *neotest.neotree.watch()*
                        `neotest.neotree.watch`({node})
tests
Parameters ~
{node} `(optional)` `(NuiTree.Node)`

------------------------------------------------------------------------------
                                                      *neotest.neotree.output()*
                        `neotest.neotree.output`({node})
test output
Parameters ~
{node} `(optional)` `(NuiTree.Node)`


==============================================================================
------------------------------------------------------------------------------
                                                                       *Neotree*
                                   `Neotree`
neotest consumer interface for neotree
Class ~
{neotest.Neotree}
Fields ~
{client} `(neotest.Client)`

------------------------------------------------------------------------------
                                                                 *Neotree:run()*
                `Neotree:run`({context}, {root}, {create_item})
Parameters ~
{context} `(table)`
{root} `(table)`
{create_item} `(fun(context: table, path: string, _type: string, bufnr?: number))`
Return ~
`(table)`

------------------------------------------------------------------------------
                                                           *Neotree:run_tests()*
                      `Neotree:run_tests`({node}, {opts})
all tests under a specific node, or all tests if no node is supplied
Parameters ~
{node} `(optional)` `(neotree)`-neotest.Node
{opts} `(optional)` `(neotree)`-neotest.RunArgs

------------------------------------------------------------------------------
                                                          *Neotree:stop_tests()*
                          `Neotree:stop_tests`({node})
all tests under a specific node, or all tests if no node is supplied
Parameters ~
{node} `(optional)` `(neotree)`-neotest.Node

------------------------------------------------------------------------------
                                                               *Neotree:watch()*
                            `Neotree:watch`({node})
Parameters ~
{node} `(optional)` `(neotree)`-neotest.Node

------------------------------------------------------------------------------
                                                              *Neotree.output()*
                            `Neotree.output`({node})
Parameters ~
{node} `(optional)` `(neotree)`-neotest.Node


==============================================================================
------------------------------------------------------------------------------

------------------------------------------------------------------------------
Class ~
{neotree-neotest.Node.Extra}
Fields ~
{real_path} `(string)`
{position_id} `(string)`
{range} `(optional)` `(integer[])`
{adapter_ids} `(optional)` `(string[])`

------------------------------------------------------------------------------
Class ~
{neotree-neotest.Node} : NuiTree.Node
Fields ~
{extra} `(neotree)`-neotest.Node.Extra

------------------------------------------------------------------------------
allowed version of neotest.RunArgs
Class ~
{neotree-neotest.RunArgs} : neotest.RunArgs
Fields ~
{tree} `(optional)` `(neotest.Tree)`
{extra_args} `(optional)` `(string[])`
{strategy} `(optional)` `(string)`

------------------------------------------------------------------------------
Class ~
{neotree-neotest.FileItem.Directory} : neotree.FileItem
Fields ~
{extra} `(neotree)`-neotest.Node.Extra?


==============================================================================
------------------------------------------------------------------------------
                                                              *M.insert_after()*
               `M.insert_after`({str}, {substring}, {insert_str})
Parameters ~
{str} `(string)`
{substring} `(string)`
{insert_str} `(string)`
Return ~
`(string)`

------------------------------------------------------------------------------
                                                  *M.get_path_from_adapter_id()*
                      `M.get_path_from_adapter_id`({str})
Parameters ~
{str} `(string)`


 vim:tw=78:ts=8:noet:ft=help:norl: